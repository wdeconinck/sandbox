sudo: false

language: cpp


# Workaround for https://github.com/travis-ci/travis-ci/issues/4681
matrix:
  - TRAVIS_EMPTY_JOB_WORKAROUND=true


cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/cmake
    - ${TRAVIS_BUILD_DIR}/deps/openmpi
    - ${TRAVIS_BUILD_DIR}/deps/mpich
    - ${TRAVIS_BUILD_DIR}/deps/eckit
    - ${TRAVIS_BUILD_DIR}/deps/fckit


matrix:
  exclude:

    - env: TRAVIS_EMPTY_JOB_WORKAROUND

  include:

    # - os: linux
    #   compiler: clang
    #   env:
    #     - CACHE_NAME=linux-clang38-mpich
    #     - CXX_COMPILER='clang++-3.8' C_COMPILER='clang-3.8' Fortran_COMPILER='gfortran'
    #     - MPI='mpich'
    #   addons: &clang38
    #     apt:
    #       sources:  ['llvm-toolchain-precise', 'ubuntu-toolchain-r-test']
    #       packages: ['clang-3.8', 'gfortran']

    # - os: linux
    #   compiler: clang
    #   env:
    #     - CACHE_NAME=linux-clang38-openmpi
    #     - CXX_COMPILER='clang++-3.8' C_COMPILER='clang-3.8' Fortran_COMPILER='gfortran'
    #     - MPI='openmpi'
    #   addons:
    #      apt:
    #        sources:  ['llvm-toolchain-precise', 'ubuntu-toolchain-r-test']
    #        packages: ['clang-3.8', 'gfortran']


    # - os: linux
    #   compiler: gcc
    #   env:
    #     - CACHE_NAME=linux-gcc5-mpich
    #     - CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran-5'
    #     - MPI='mpich'
    #   addons: &gcc5
    #     apt:
    #       sources:  ['ubuntu-toolchain-r-test']
    #       packages: ['g++-5', 'gcc-5', 'gfortran-5']

    # - os: linux
    #   compiler: gcc
    #   env:
    #     - CACHE_NAME=linux-gcc5-openmpi
    #     - CXX_COMPILER='g++-5' C_COMPILER='gcc-5' Fortran_COMPILER='gfortran-5'
    #     - MPI='openmpi'
    #   addons:
    #     apt:
    #       sources:  ['ubuntu-toolchain-r-test']
    #       packages: ['g++-5', 'gcc-5', 'gfortran-5']


    - os: linux
      compiler: gcc
      env:
        - CACHE_NAME=linux-pgi-openmpi
        - CXX_COMPILER='pgc++' C_COMPILER='pgcc' Fortran_COMPILER='pgfortran'
        - MPI='openmpi'
        - PGI_VERSION="CommunityEdition"
        - ECKIT_CMAKE_OPTIONS="-DRT_LIB=/usr/lib/x86_64-linux-gnu/librt.so -DCURSES_LIBRARY=/usr/lib/x86_64-linux-gnu/libcurses.so"


    # - os: osx
    #   env:
    #     - CACHE_NAME=osx-clang-mpich
    #     - CXX_COMPILER='clang++' C_COMPILER='clang' Fortran_COMPILER='gfortran'
    #     - MPI=mpich
    #   osx_image: xcode9

    # - os: osx
    #   env:
    #     - CACHE_NAME=osx-clang-openmpi
    #     - CXX_COMPILER='clang++' C_COMPILER='clang' Fortran_COMPILER='gfortran'
    #     - MPI=openmpi
    #   osx_image: xcode9

before_install:
  #################################################################
  # Fixes to pre-installed packages
  #################################################################
  - |
    ### Fix pre-installed packages
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update
      brew list oclint || brew cask uninstall oclint # Prevent conflict with gcc
    fi

  #################################################################
  # Set compilers
  #################################################################
  - |
    ### Set compilers
    export CC=${C_COMPILER}
    export CXX=${CXX_COMPILER}
    export FC=${Fortran_COMPILER}

  - |
    export PATH=${TRAVIS_BUILD_DIR}/ci:${PATH}

install:

  #################################################################
  # All dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  #################################################################
  - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  #################################################################
  # Install Compilers
  #################################################################
  - |
    ### Install gcc (homebrew)
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew upgrade gcc || brew install gcc
    fi
  - |
    ### Install PGI community edition
    if [[ "${PGI_VERSION:-notset}" == "CommunityEdition" ]]; then
      install-pgi.sh --mpi --prefix ${DEPS_DIR}/pgi
      source ${DEPS_DIR}/pgi/env.sh
    fi


  #################################################################
  # Install CGAL
  #################################################################
  - |
    ### Install CGAL
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew upgrade cgal || brew install cgal
    fi

  #################################################################
  # Install MPI
  #################################################################
  - |
    ### Install MPI
    install-mpi.sh ${MPI}
    source ${DEPS_DIR}/${MPI}/env.sh

  #################################################################
  # Install CMake
  #################################################################
  - |
    ### Install CMake
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [[ -z "$(ls -A ${DEPS_DIR}/cmake)" ]]; then
        CMAKE_URL="https://cmake.org/files/v3.10/cmake-3.10.2-Linux-x86_64.tar.gz"
        mkdir -p ${DEPS_DIR}/cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${DEPS_DIR}/cmake
      fi
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew upgrade cmake || brew install cmake
    fi
    cmake --version

  #################################################################
  # Install ecbuild
  #################################################################
  - |
    ### Install ecbuild
    git clone --depth 1 -b master https://github.com/ecmwf/ecbuild ${DEPS_DIR}/ecbuild
    export PATH=${DEPS_DIR}/ecbuild/bin:${PATH}
    ecbuild --version

  #################################################################
  # Install eckit
  #################################################################
  - github-sha.sh ecmwf eckit master
  - VVV=$(github-sha.sh ecmwf eckit master)
  - echo $VVV
  - |
    ### Install eckit
    export ECKIT_PATH=${DEPS_DIR}/eckit
    ECKIT_SHA=$(github-sha.sh ecmwf eckit master)
    if [[ -f ${ECKIT_PATH}/sha-${ECKIT_SHA} ]]; then
      echo "Cached eckit is up to date, sha-${ECKIT_SHA} ."
    else
      if ls ${ECKIT_PATH}/sha-* 1> /dev/null 2>&1; then
         echo "Cached eckit $(ls -1 ${ECKIT_PATH}/sha-*) is out of date."
      fi
      echo "Installing eckit sha-${ECKIT_SHA}"
      rm -rf ${ECKIT_PATH}
      ECKIT_SOURCE_DIR=${TRAVIS_BUILD_DIR}/downloads/eckit
      ECKIT_BUILD_DIR=${TRAVIS_BUILD_DIR}/builds/eckit
      git clone --depth 1 -b master https://github.com/ecmwf/eckit ${ECKIT_SOURCE_DIR}
      mkdir -p ${ECKIT_BUILD_DIR} && cd ${ECKIT_BUILD_DIR}
      ecbuild --build=debug --prefix=${ECKIT_PATH} -- ${ECKIT_CMAKE_OPTIONS} -DENABLE_TESTS=OFF ${ECKIT_SOURCE_DIR}
      make -j4 install
      touch ${ECKIT_PATH}/sha-${ECKIT_SHA}
    fi
    echo "eckit version - $(${ECKIT_PATH}/bin/eckit_version)"

  #################################################################
  # Install fckit
  #################################################################
  - |
    ### Install fckit
    export FCKIT_PATH=${DEPS_DIR}/fckit
    FCKIT_SHA=$(github-sha.sh ecmwf fckit master)
    if [[ -f ${FCKIT_PATH}/sha-${FCKIT_SHA} ]]; then
      echo "Cached fckit is up to date, sha-${FCKIT_SHA} ."
    else
      if ls ${FCKIT_PATH}/sha-* 1> /dev/null 2>&1; then
         echo "Cached fckit $(ls -1 ${FCKIT_PATH}/sha-*) is out of date."
      fi
      echo "Installing fckit sha-${FCKIT_SHA}"
      rm -rf ${FCKIT_PATH}
      FCKIT_SOURCE_DIR=${TRAVIS_BUILD_DIR}/downloads/fckit
      FCKIT_BUILD_DIR=${TRAVIS_BUILD_DIR}/builds/fckit
      git clone -b master https://github.com/ecmwf/fckit ${FCKIT_SOURCE_DIR}
      mkdir -p ${FCKIT_BUILD_DIR} && cd ${FCKIT_BUILD_DIR}
      ecbuild --build=debug --prefix=${FCKIT_PATH} -- -DENABLE_TESTS=ON ${FCKIT_SOURCE_DIR}
      make -j4 install
    fi

  - cd ${TRAVIS_BUILD_DIR}

script:

  - |
    ATLAS_SOURCE_DIR=${TRAVIS_BUILD_DIR}/downloads/atlas
    ATLAS_BUILD_DIR=${TRAVIS_BUILD_DIR}/builds/atlas

  #################################################################
  # Download Atlas
  #################################################################
  - git clone --depth 1 -b master https://github.com/ecmwf/atlas ${ATLAS_SOURCE_DIR}

  #################################################################
  # Build Atlas
  #################################################################
  - mkdir -p ${ATLAS_BUILD_DIR} && cd ${ATLAS_BUILD_DIR}
  - ecbuild --build=debug -- ${CMAKE_OPTIONS} ${ATLAS_SOURCE_DIR}
  - make -j4
  - bin/atlas --info

  #################################################################
  # Test Atlas
  #################################################################
  - ctest

after_failure:

  - cd ${ATLAS_BUILD_DIR}
  - ctest -VV --rerun-failed
  - cat ecbuild.log
